{{>admin-side-top}}

<section class="add-packages">
   <h2 style="text-align:center;font-weight:bold" class="mt-4">Add Packages</h2>
  <div class="container py-auto pl-auto">
    <div class="row mt-4 py-auto">
      <div class="col-md-6 mt-5">
       
        <form action="/admin/add-packages" enctype="multipart/form-data" method="post" id="add-package">
          <label for="">Name</label>
          <input type="text" style="width:200px;border:1px solid black" name="Name" class="form-control">
          <br><label for="">Category</label>
          <br><select name="Category" id="category">
            <option value="">---select a category---</option>
            {{#each categories}}
            <option value="{{this.Category}}">{{this.Category}}</option><br>
            {{/each}}
          </select>
          <br><label for=""> Start Date</label>
          <input type="date" name="Date" id="pakageDate" style="width:200px;border:1px solid black"
            class="form-control">

          <br><label for=""> Expiry Date</label>
          <input type="date" name="expiryDate" id="expDate" style="width:200px;border:1px solid black"
            class="form-control">

          <br><label for="">Description</label>
          <textarea name="Description" id="" cols="83" rows="10"></textarea>

          <br><label for="Itinerary">Itinerary</label>
          <textarea name="Itinerary" id="Itinerary" cols="83" rows="10" required></textarea>


          <br><label for="Summary">Summary</label>
          <textarea name="Summary" id="Summary" cols="83" rows="10" required></textarea>


          <br><label for="">Price</label>
          <input type="text" name="Price" style="width:200px;border:1px solid black" class="form-control">
          <div>
            <br><label for=""><strong>Image1</strong> </label>
            <div>
              <img id="imgView1" alt="" style="width:100px">

              <input class="mr-5" type="file" id="id_image1" name="Image" onchange="viewImage1(event)"><br>
              <div class="vald-info" id="info1"></div>
              <h5 class="error_form text-danger" id="image1_error_message"></h5>
              <div id="image-box1" class="image-container col-lg-6"></div>
              <br><button class="btn btn-danger" id="crop-btn1" style="margin-top:20px; display: none"
                type="button">Crop</button>

            </div>
          </div>

          <!--image3-->
          <div>
            <br><label for=""><strong>Image2</strong> </label>
            <div>
              <img id="imgView2" alt="" style="width:100px">

              <input class="mr-5" type="file" id="id_image2" name="Image2" onchange="viewImage2(event)"><br>
              <div class="vald-info" id="info2"></div>
              <h5 class="error_form text-danger" id="image2_error_message"></h5>
              <div id="image-box2" class="image-container col-lg-6"></div>
              <br><button class="btn btn-danger" id="crop-btn2" style="margin-top:20px; display: none"
                type="button">Crop</button>

            </div>
          </div>

          <!--image3-->
          <div>
            <br><label for=""><strong>Image3</strong> </label>
            <div>
              <img id="imgView3" alt="" style="width:100px">

              <input class="mr-5" type="file" id="id_image3" name="Image3" onchange="viewImage3(event)"><br>
              <div class="vald-info" id="info3"></div>
              <h5 class="error_form text-danger" id="image3_error_message"></h5>
              <div id="image-box3" class="image-container col-lg-6"></div>
              <br><button class="btn btn-danger" id="crop-btn3" style="margin-top:20px; display: none"
                type="button">Crop</button>

            </div>
          </div>
          <!--image4-->
          <div>
            <br><label for=""><strong>Image4</strong> </label>
            <div>
              <img id="imgView4" alt="" style="width:100px">

              <input class="mr-5" type="file" id="id_image4" name="Image4" onchange="viewImage4(event)"><br>
              <div class="vald-info" id="info4"></div>
              <h5 class="error_form text-danger" id="image4_error_message"></h5>
              <div id="image-box4" class="image-container col-lg-6"></div>
              <br><button class="btn btn-danger" id="crop-btn4" style="margin-top:20px; display: none"
                type="button">Crop</button>

            </div>
          </div>

          <button type="submit" class="btn btn-success mt-4">Submit</button>

        </form>
      </div>
    </div>
  </div>
  </div>
</section>

<script>

  pakageDate.min = new Date().toISOString().split("T")[0];
  expDate.min = new Date().toISOString().split("T")[0];
 

  const imagebox1 = document.getElementById('image-box1')
  const crop_btn1 = document.getElementById('crop-btn1')
  const input1 = document.getElementById('id_image1')
  function viewImage1(event) {

    var fileInput = document.getElementById('id_image1');
    var filePath = fileInput.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.webp)$/i;
    if (!allowedExtensions.exec(filePath)) {
      fileInput.value = '';
      Swal.fire("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
    }

  }

  // When user uploads the image this event will get triggered
  input1.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image1 = document.getElementById('image1')

    // Displaying the image box
    document.getElementById('image-box1').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn1').style.display = 'block'
    // Hiding the Post button
    const cropper = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById('id_image1');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
        // Hide the cropper box
        document.getElementById('image-box1').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn1').style.display = 'none'
      })
    })
  })



  const imagebox2 = document.getElementById('image-box2')
  const crop_btn2 = document.getElementById('crop-btn2')
  const input2 = document.getElementById('id_image2')
  function viewImage2(event) {

    var fileInput2 = document.getElementById('id_image2');
    var filePath2 = fileInput2.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.webp)$/i;
    if (!allowedExtensions.exec(filePath2)) {
      fileInput2.value = '';
      Swal.fire("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
    }
  }

  // When user uploads the image this event will get triggered
  input2.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data2 = input2.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url2 = URL.createObjectURL(img_data2)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image2 = document.getElementById('image2')

    // Displaying the image box
    document.getElementById('image-box2').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn2').style.display = 'block'
    // Hiding the Post button
    const cropper = new Cropper(image2, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement2 = document.getElementById('id_image2');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container2 = new DataTransfer();
        // Add the cropped image file to the container
        container2.items.add(file2);
        // Replace the original image file with the new cropped image file
        fileInputElement2.files = container2.files;
        document.getElementById('imgView2').src = URL.createObjectURL(fileInputElement2.files[0])
        // Hide the cropper box
        document.getElementById('image-box2').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn2').style.display = 'none'
      })
    })
  })



  const imagebox3 = document.getElementById('image-box3')
  const crop_btn3 = document.getElementById('crop-btn3')
  const input3 = document.getElementById('id_image3')
  function viewImage3(event) {

    var fileInput3 = document.getElementById('id_image3');
    var filePath3 = fileInput3.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.webp)$/i;
    if (!allowedExtensions.exec(filePath3)) {
      fileInput3.value = '';
      Swal.fire("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
    }
  }

  // When user uploads the image this event will get triggered
  input3.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data3 = input3.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url3 = URL.createObjectURL(img_data3)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image3 = document.getElementById('image3')

    // Displaying the image box
    document.getElementById('image-box3').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn3').style.display = 'block'
    // Hiding the Post button
    const cropper = new Cropper(image3, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn3.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement3 = document.getElementById('id_image3');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container3 = new DataTransfer();
        // Add the cropped image file to the container
        container3.items.add(file3);
        // Replace the original image file with the new cropped image file
        fileInputElement3.files = container3.files;
        document.getElementById('imgView3').src = URL.createObjectURL(fileInputElement3.files[0])
        // Hide the cropper box
        document.getElementById('image-box3').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn3').style.display = 'none'
      })
    })
  })


  
  const imagebox4 = document.getElementById('image-box4')
  const crop_btn4 = document.getElementById('crop-btn4')
  const input4 = document.getElementById('id_image4')
  function viewImage4(event) {

    var fileInput4 = document.getElementById('id_image4');
    var filePath4 = fileInput4.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.webp)$/i;
    if (!allowedExtensions.exec(filePath4)) {
      fileInput4.value = '';
      Swal.fire("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
    }

  }

  // When user uploads the image this event will get triggered
  input4.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data4 = input4.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url4 = URL.createObjectURL(img_data4)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox4.innerHTML = `<img src="${url4}" id="image4" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image4 = document.getElementById('image4')

    // Displaying the image box
    document.getElementById('image-box4').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn4').style.display = 'block'
    // Hiding the Post button
    const cropper = new Cropper(image4, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn4.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement4 = document.getElementById('id_image4');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file4 = new File([blob], img_data4.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container4 = new DataTransfer();
        // Add the cropped image file to the container
        container4.items.add(file4);
        // Replace the original image file with the new cropped image file
        fileInputElement4.files = container4.files;
        document.getElementById('imgView4').src = URL.createObjectURL(fileInputElement4.files[0])
        // Hide the cropper box
        document.getElementById('image-box4').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn4').style.display = 'none'
      })
    })
  })

  jQuery('#add-package').validate({
    ignore: [],
    rules:{
      Name:'required',
      Category:'required',
      Date:'required',
      expiryDate:'required',
      Description:'required',
      Itinerary:{
        required:function(){
          return CKEDITOR.instances.Itinerary.updateElement()
        }
      },
      Summary:{
        required :function(){
          return CKEDITOR.instances.Summary.updateElement()
        }
      },
      Price:{
        required:true,
        number:true
      },
      Image:'required',
      Image2:'required',
      Image3:'required', 
      Image4:'required'
    },messages:{
      Name:'Please enter the Name of the Package',
      Category:'Please choose a category',
      Date:'Please enter a package start date',
      expiryDate:'Please enter a package expiry Date',
      Description:'Please enter the package description',
      Itinerary:{
        required:'Please enter the itinerary details'
      },
      Summary:{
        required:'Please enter the package summary'
      },
      Price:{
        required:'Please enter the package Price',
        number:'Price value must be a number'
      },
      Image:'Please upload Image 1',
      Image2:'Please upload Image 2',
      Image3:'Please upload Image 3',
      Image4:'Please upload Image 4'
    }
  })
</script>

<script type="text/javascript">
  CKEDITOR.replace("Itinerary", {
    width: '600'
  });

  CKEDITOR.replace("Summary", {
    width: '600'
  });
</script>

{{>admin-side-bottom}}